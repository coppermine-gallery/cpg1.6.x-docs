<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<title>Sanitization of Superglobals using Inspekt - Coppermine Photo Gallery - Documentation &amp; Manual</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="language" content="en" />
<meta name="copyright" content="Coppermine dev team" />
<meta name="description" content="list of plugin hooks" />
<!--
  Coppermine version: 1.6.03
  $HeadURL$
-->
<link rel="stylesheet" type="text/css" href="../style/style.css" media="all" />
<link rel="stylesheet" type="text/css" href="../style/screen.css" media="screen" />
<link rel="stylesheet" type="text/css" href="../style/print.css" media="print" />
<link rel="shortcut icon" href="../favicon.ico" />
<script src="../js/jquery.js" type="text/javascript"></script>
<script src="../js/jquery.treeview.js" type="text/javascript"></script>
<script src="script.js" type="text/javascript"></script>
</head>
<body>
<h1 id="docheader">Coppermine Photo Gallery v1.6.x: Documentation and Manual</h1>
<div id="toc">
<a href="toc.htm">Table of Contents</a>
</div>

<a id="superglobals_sanitization"></a><h1>Sanitization of Superglobals using Inspekt<a href="#superglobals_sanitization" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h1>

<a id="superglobals_sanitization_target_audience"></a><h2>Target audience<a href="#superglobals_sanitization_target_audience" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h2>
<p>This part of the documentation is not meant for end users of Coppermine, but only for developers and skilled users who are familiar with coding. There is no support for this section, it comes as-is.</p>
<p>For coppermine dev team members, this piece of documentation is meant both as a reference as well as a programming guideline.</p>
<p>For users, this section can be helpful if you want to modify your coppermine gallery and want to come up with additional functionality and use superglobals (like <span class="code">$_GET</span> and <span class="code">$_POST</span> variables) in those custom scripts.</p>

<a id="superglobals_sanitization_whats_new"></a><h2>What's new?<a href="#superglobals_sanitization_whats_new" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h2>
<p>Starting with cpg1.5.0 the individual components of coppermine (the script files like displayimage.php) can no longer access <a href="http://www.php.net/manual/en/language.variables.predefined.php#language.variables.superglobals" rel="external" class="phpnet">superglobals</a> like <span class="code">$_GET</span> or <span class="code">$_POST</span> directly. Those superglobals are being put into a &quot;cage&quot; object instead when the Coppermine basic includes get started and all vars and function are being initialized. Once the &quot;cage&quot; has been populated, the superglobals get emptied and can therefore no longer be accessed. Subsequently, you can no longer use the superglobals as you might be used to. Confused? Read on.</p>

<a id="superglobals_sanitization_reason"></a><h2>Reason<a href="#superglobals_sanitization_reason" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h2>
<p>Everyone knows that you should filter your inputs - most of the good programmers do it, but when you are working with a large team of programmers on an open source project things slip up, errors do creep in, at times like this you wish for a mechanism which would prevent your team from making such mistakes, some thing which forces them to declare their intent.</p>
<p>Most of the vulnerabilities that have been discovered in cpg1.4.x where caused by user input not properly sanitized, which led to <abbr title="Cross Site Scripting">XSS</abbr> attacks becoming possible. In an effort to improve the security behind coppermine thoroughly the dev team has decided to sanitize all superglobals using the tool &quot;<a href="http://code.google.com/p/inspekt/" rel="external" class="external">Inspekt</a>&quot; (which is being released under the <a href="http://www.opensource.org/licenses/bsd-license.php" rel="external" class="external">BSD license</a> and can therefore be included without issues into the coppermine core code license-wise).</p>
<p>The idea to use Inspekt has been brought up by Coppermine lead developer Dr. Tarique Sani in his blog article &quot;<a href="http://www.sanisoft.com/blog/2007/10/15/inspekt-put-a-firewall-in-your-php-applications/" rel="external" class="external">Inspekt - put a firewall in your PHP applications</a>&quot;, where he discusses the reasons to use Inspekt in detail.</p>

<a id="superglobals_sanitization_about_inspekt"></a><h2>What Inspekt does<a href="#superglobals_sanitization_about_inspekt" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h2>
<p>Inspekt acts as a sort of 'firewall' API between user input and the rest of the application. It takes PHP superglobal arrays, encapsulates their data in an "cage" object, and destroys the original superglobal. Data can then be retrieved from the input data object using a variety of accessor methods that apply filtering, or the data can be checked against validation methods. Raw data can only be accessed via a <span class="code">getRaw()</span> method, forcing the developer to show clear intent. Read more about usage on the <a href="http://code.google.com/p/inspekt/wiki/BasicUsage" rel="external" class="external">Inspect Wiki: Basic Usage</a>.</p>

<div class="indent">
    <a id="superglobals_sanitization_inspekt_accessor_methods"></a><h3>Inspekt accessor methods<a href="#superglobals_sanitization_inspekt_accessor_methods" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
    <p>One thing which is missing from the Inspekt Wiki page is the list of accessor methods. In brief they are:</p>
    <ul>
      <li><span class="code">getAlnum</span> - Returns only the alphabetic characters and digits in value.</li>
      <li><span class="code">getAlpha</span> - Returns only the alphabetic characters in value.</li>
      <li><span class="code">getDigits</span> - Returns only the digits in value. This differs from getInt().</li>
      <li><span class="code">getDir</span> - Returns dirname(value).</li>
      <li><span class="code">getInt</span> - Returns (int) value.</li>
      <li><span class="code">getPath</span> - Returns realpath(value).</li>
      <li><span class="code">getEscaped</span> - Returns the requested value with mysql_real_escape taking into account the magic quotes gpc setting.<br />
      Getting a properly escaped value serves the purpose of preventing to a degree the SQL injection possibilities - it is to be used in places where we were previously using addslashes. If sanitization is needed for user input it should be <em>before</em> escaping and not after it.</li>
      <li><span class="code">getMatched</span> - Returns an array of matches against a regex for a given value. If a match fails false is returned.</li>
      <li><span class="code">getRaw</span> - Returns the Raw value.</li>
    </ul>
    <p>Care should be taken to as far as possible not use the getRaw() method - if it is used then please comment profusely as to why it is safe to use getRaw in the given circumstances (e.g.: the same value was tested against a regex before fetching or the value is sanitized immediately after getting). If there case where getRaw() cannot be avoided but is still unsafe please comment on possible solutions. Once again - the final aim is to NOT use getRaw() at all.</p>
</div>

<a id="superglobals_sanitization_howto"></a><h2>How to use Inspekt with Coppermine Photo Gallery<a href="#superglobals_sanitization_howto" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h2>
<p>Inspekt provides tools for filtering scalar or array data in two ways:</p>
<ul>
  <li>Cage objects that encapsulate an array and provide accessor methods that force filtering and/or validation - Special helper methods allow you to set up cages on the input superglobals with one method call</li>
  <li>Static filters and validators for arbitrary scalar or array data</li>
</ul>
<p>The guiding principle for Inspekt is to make it easier to create secure PHP applications. As such, ease of use is valued over flexibility, and verbosity is avoided when possible.</p>

<div class="indent">
    <a id="superglobals_sanitization_howto_using"></a><h3>Using Inspekt<a href="#superglobals_sanitization_howto_using" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
    <pre class="cpg_code">// Example: creating a cage for $_POST
require_once "Inspekt.php";

$cage_POST = Inspekt::makePostCage();

$userid = $cage_POST->getInt('userid');

if ( !isset($_POST['userid']) ) {
    echo 'Cannot access input via $_POST -- use the cage object';
}</pre>
    <p>We can see from the above example that after making a cage for <span class="code">$_POST</span>, it is not accessible directly. One must use the methods provided by Inspekt to get the data in correct data type and format.</p>

    <a id="superglobals_sanitization_howto_inspekt_in_coppermine"></a><h3>Inspekt in Coppermine<a href="#superglobals_sanitization_howto_inspekt_in_coppermine" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
    <p>Inspekt has been used in CPG by including it in init.inc.php file at the very beginning and creating a <strong>supercage</strong> immediately after its inclusion.</p>
    <pre class="cpg_code">set_include_path(get_include_path().PATH_SEPARATOR.dirname(__FILE__).PATH_SEPARATOR.'Inspekt');
echo dirname(__FILE__);
require_once "Inspekt.php";

$superCage = Inspekt::makeSuperCage();</pre>
    <p>Supercage is an aggregation of all the cages, i.e <abbr title="Environment, Get, Post, Cookie, Server">EGPCS</abbr> (the order of variable parsing). Once the supercage is created none of the EGPCS variables are available.</p>
    <p>To access a variable within a supercage we have to use the following format:</p>
    <pre class="cpg_code">$qs = $superCage->server->getDigits('QUERY_STRING');
$album_id = $superCage->get->getInt('album');
$title = $superCage->post->getAlpha('title');</pre>
    <p class="cpg_message_success">To get an instance of <span class="code">$superCage</span> inside a function use <span class="code">$superCage = Inspekt::makeSuperCage();</span> again. Do not use the global directive. It may be noted here that <span class="code">makeSuperCage()</span> creates a singleton pattern object. So calling it multiple times does not have any overheads and you can be assured of getting the very same object every time.</p>
    <p>In other words - you don't have to take care not to define <span class="code">$superCage</span> - it doesn't hurt to call it many times over. Don't bloat the code by assigning other names:</p>
    <table class="maintable" style="border-collapse:collapse">
        <tr>
            <th class="tableh1 th50p">
                Bad example
            </th>
            <th class="tableh1 th50p">
                Good example
            </th>
        </tr>
        <tr>
            <td class="cpg_message_error code">
    			<span class="code">$yetAnotherCage = Inspekt::makeSuperCage();</span>
            </td>
            <td class="cpg_message_success">
    			<span class="code">$superCage = Inspekt::makeSuperCage();</span>
            </td>
        </tr>
    </table>
    <p>Every dev is encouraged to download the latest tarball of Inspekt and checkout the API documentation for the list of <a href="#superglobals_sanitization_inspekt_accessor_methods">available methods for accessing data from cages</a>. In addition to this, there is a bunch of test functions which will test a value of a given key against a pre-determined datatype or format.</p>

    <a id="superglobals_sanitization_howto_consider_methods"></a><h3>Consider the methods to use<a href="#superglobals_sanitization_howto_consider_methods" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
    <p>Before using a particular method, make up your mind what kind of data you expect to retrieve: is the data you expect just an integer (e.g. &quot;0&quot; or &quot;1&quot; used in a parameter to toggle an option on or off) - then use <span class="code">getInt</span>. Do you expect an alphanumeric string (with only alphanumeric data, no spaces, no special chars nor non-latin characters), like the parameter of a pre-determined action (e.g. &quot;delete&quot;, &quot;update&quot; or &quot;add&quot;), then use <span class="code">getAlnum</span> or <span class="code">getAlpha</span>. If the parameter you're trying to fetch <em>may</em> contain something else (e.g. a filename that may only contain latin characters, but that may as well contain utf-8 encoded non-latin characters like Umlauts), then use getMatched and perform a match against a regular expression - you may even have to sanitize the value even more after fetching it.</p>

    <a id="superglobals_sanitization_howto_examples"></a><h3>Examples<a href="#superglobals_sanitization_howto_examples" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
    <p>Here are some real-world examples of how code used to look initially (before Inspekt was introduced) and what was changed to make it work with Inspekt.</p>
<table class="cpg_zebra">
  <tr>
    <th>File</th>
    <th>Before implementing Inspekt</th>
    <th>After implementing Inspekt</th>
  </tr>
  <tr>
    <td>albmgr.php</td>
    <td>
      <pre>$CLEAN['cat'] = isset($_GET['cat']) ? (int)($_GET['cat']) : 0;</pre>
      [...]
      <pre>$cat = $CLEAN['cat'];</pre>
    </td>
    <td>
      <pre> </pre>
      [...]
      <pre>if ($superCage->get->keyExists('cat')) {
    $cat = $superCage->get->getInt('cat');
} else {
        $cat = 0;
}</pre>
    </td>
  </tr>
  <tr>
    <td>calendar.php</td>
    <td>
      <pre>if ($_REQUEST['action'] == 'browsebydate') {</pre>
      [...]
      <pre>$month = (int) $_REQUEST['month'];
$year  = (int) $_REQUEST['year'];</pre>
    </td>
    <td>
      <pre>if ($matches = $superCage-&gt;get-&gt;getMatched('action', '/^[a-z]+$/')) {
    $action = $matches[0];
} elseif ($matches = $superCage-&gt;post-&gt;getMatched('action', '/^[a-z]+$/')) {
    $action = $matches[0];
} else {
    $action = '';
}
if ($action == 'browsebydate') {</pre>
      [...]
      <pre>if ($superCage-&gt;get-&gt;testInt('month')) {
        $month = $superCage-&gt;get-&gt;getInt('month');
} elseif ($superCage-&gt;post-&gt;testInt('month')) {
    $month = $superCage-&gt;post-&gt;getInt('month');
} else {
        $month = 0;
}

if ($superCage-&gt;get-&gt;testInt('year')) {
    $year = $superCage-&gt;get-&gt;getInt('year');
} elseif ($superCage-&gt;post-&gt;testInt('year')) {
    $year = $superCage-&gt;post-&gt;getInt('year');
} else {
    $year = 0;
}</pre>
    </td>
  </tr>
  <tr>
    <td>getlang.php</td>
    <td>
      <pre>if (isset($_GET['get'])) {
     $file_index = (int)$_GET['get'];</pre>
     [...]
     <pre>&lt;img src="images/folder.gif" alt=""&gt;&amp;nbsp;&lt;a href="{$_SERVER['PHP_SELF']}?get=$index"&gt;$file&lt;/a&gt;</pre>
    </td>
    <td>
      <pre>if ($superCage-&gt;get-&gt;keyExists('get')) {
                $file_index = $superCage-&gt;get-&gt;getInt('get') ;</pre>
      [...]
      <pre>&lt;img src="images/folder.gif" alt=""&gt;&amp;nbsp;&lt;a href="{$CPG_PHP_SELF}?get=$index"&gt;$file&lt;/a&gt;</pre>
    </td>
  </tr>
</table>

    <a id="superglobals_sanitization_howto_regex"></a><h3>Regular Expressions (regex)<a href="#superglobals_sanitization_howto_regex" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
    <p>The method <span class="code">getMatched</span> makes use of regular expressions that can be tricky for beginners. It would be beyond the scope of this documentation to explain how regular expressions work in detail - we just added some &quot;typical&quot; regular expressions that you can use in your own code:</p>
    <table class="cpg_zebra">
      <tr>
        <th>Regex</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
      <tr>
          <td>
              <span class="code">/^[0-9a-z]+$/</span>
          </td>
          <td>
              Will match lower-case alpha-numerals
          </td>
          <td>
          </td>
      </tr>
      <tr>
          <td>
              <span class="code">/^[0-9A-A]+$/</span>
          </td>
          <td>
              Will match upper-case alpha-numerals
          </td>
          <td>
          </td>
      </tr>
      <tr>
          <td>
              <span class="code">/^[0-9A-Za-z]+$/</span>
          </td>
          <td>
              Will match alpha-numerals (case-insensitive)
          </td>
          <td>
          </td>
      </tr>
      <tr>
          <td>
              <span class="code">/^[0-9A-Za-z]{3,6}$/</span>
          </td>
          <td>
              Will match alpha-numerals (case-insensitive) with a minimum of 3 characters and a maximum of 6
          </td>
          <td>
          </td>
      </tr>
      <tr>
          <td>
              <span class="code">/^[a-z_]+$/</span>
          </td>
          <td>
              Will match lower case letters and an underscore, e.g. strings like 'foo' or 'foo_bar'
          </td>
          <td>
          </td>
      </tr>
      <tr>
        <td><span class="code">/^[0-9A-Za-z_]+$/</span></td>
        <td>Alphanumerals (numbers and latin characters) both in lower as well as upper case and the special char &quot;underscore&quot; (<span class="code">_</span>) will match (i.e. return TRUE)</td>
        <td>'<span class="code">foobar</span>', '<span class="code">fooBar</span>', '<span class="code">foo_bar</span>', '<span class="code">foobar_</span>', '<span class="code">2foo3bar</span>' will match (true).<br />'<span class="code">fübar</span>', '<span class="code">foo-bar</span>', '<span class="code">foo bar</span>' will not match (false)</td>
      </tr>
      <tr>
        <td><span class="code">/^[a-zA-Z0-9_\-]*$/</span></td>
        <td>Alphanumerals (numbers and latin characters) both in lower as well as upper case and the special char &quot;underscore&quot; (<span class="code">_</span>) and the dash (<span class="code">-</span>) will match (i.e. return TRUE)</td>
        <td>'<span class="code">foobar</span>', '<span class="code">fooBar</span>', '<span class="code">foo_bar</span>', '<span class="code">foobar_</span>', '<span class="code">2foo3bar</span>', '<span class="code">foo-bar</span>' will match (true).</td>
      </tr>
      <tr>
        <td><span class="code">/^[a-z]*$/</span></td>
        <td>Only latin character in lowercase will match.</td>
        <td>'<span class="code">foobar</span>' will match (true).<br />'<span class="code">fooBar</span>', '<span class="code">foo5bar</span>', '<span class="code">foo-bar</span>', '<span class="code">foo bar</span>' will not match (false)</td>
      </tr>
      <tr>
        <td><span class="code">/^[a-zA-Z0-9]*$/</span></td>
        <td>Alphanumerals (numbers and latin characters) both in lower as well as upper case will match (i.e. return TRUE). However, you could use the method <span class="code">getAlnum</span> just as well - it will make the code more readable and easier to understand for others.</td>
        <td>'<span class="code">foobar</span>', '<span class="code">fooBar</span>', '<span class="code">2foo3bar</span>' will match (true).<br />'<span class="code">fübar</span>', '<span class="code">foo_bar</span>', '<span class="code">foo-bar</span>', '<span class="code">foo bar</span>', '<span class="code">foobar_</span>' will not match (false)</td>
      </tr>
      <tr>
        <td><span class="code">/^\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b$/</span></td>
        <td>IP addresses (v4) will match (return TRUE).</td>
        <td>'<span class="code">1.2.3.4</span>', '<span class="code">192.168.0.1</span>' will match (true).<br />'<span class="code">1.2.3</span>', '<span class="code">1.2.3.4.5</span>', '<span class="code">192.168.0.10/2</span>', '<span class="code">coppermine-gallery.net</span>', '<span class="code">192.168.0.300</span>' will not match (false)</td>
      </tr>
      <tr>
        <td><span class="code">/^([a-zA-Z0-9]((\.|\-|\_){0,1}[a-zA-Z0-9]){0,})@([a-zA-Z]((\.|\-){0,1}[a-zA-Z0-9]){0,})\.([a-zA-Z]{2,4})$/</span></td>
        <td>Valid email addresses will match (i.e. return TRUE). However, this regex does not check if the domain exists nor if the <abbr title="Top Level Domain">TLD</abbr> is valid.</td>
        <td>'<span class="code">john.doe@example.com</span>', '<span class="code">john@example.com</span>', '<span class="code">john-doe@some.example.com</span>' will match (true).<br />'<span class="code">john.doe</span>', '<span class="code">john.doe@</span>', '<span class="code">@example.com</span>', '<span class="code">jürgen.doe@example.com</span>', '<span class="code">john=doe@example.com</span>' will not match (false)</td>
      </tr>
      <tr>
          <td>
              <span class="code">/^[+-]?([0-9]{1,2})*\.?[0-9]+$/</span>
          </td>
          <td>
              Will allow you to enter integers between 0 and 999 with or without a trailing percent sign, which can be helpfull if you want to allow dimensions (for HTML/CSS attributes) in pixels or percent
          </td>
          <td>
          </td>
      </tr>
      <tr>
          <td>
              <span class="code">/^#(?:(?:[a-f\d]{3}){1,2})$/i</span>
          </td>
          <td>
              Will match valid RGB color codes from #000000 to #FFFFFF
          </td>
          <td>
          </td>
      </tr>
    </table>
</div>

<a id="superglobals_sanitization_links"></a><h2>Links<a href="#superglobals_sanitization_links" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h2>
<ul>
    <li><a href="http://code.google.com/p/inspekt/" rel="external" class="external">Inspekt project pages</a><br />
           <ul>
               <li><a href="http://code.google.com/p/inspekt/wiki/BasicUsage" rel="external" class="external">Inspekt Wiki: BasicUsage</a></li>
               <li><a href="http://www.opensource.org/licenses/bsd-license.php" rel="external" class="external">BSD license</a></li>
               <li><a href="http://code.google.com/p/inspekt/downloads/list" rel="external" class="external">Download Inspekt</a></li>
               <li><a href="http://framework.zend.com/" rel="external" class="external">Zend Framework</a></li>
               <li><a href="http://inspekt.googlecode.com/svn/" rel="external" class="external">Inspekt svn</a></li>
           </ul>
    </li>
    <li><a href="http://www.php.net/manual/en/language.variables.predefined.php#language.variables.superglobals" rel="external" class="phpnet">PHP documentation: superglobals</a></li>
    <li>Blog article &quot;<a href="http://www.sanisoft.com/blog/2007/10/15/inspekt-put-a-firewall-in-your-php-applications/" rel="external" class="external">Inspekt - put a firewall in your PHP applications</a>&quot; by Dr. Tarique Sani</li>
    <li><a href="http://coppermine-gallery.net/forum/index.php?topic=47952.0" rel="external" class="external">Coppermine board: Inspekt introduction progress</a> (access restricted to dev team members)</li>
    <li><a href="http://coppermine-gallery.net/forum/index.php?topic=47980.0" rel="external" class="external">Coppermine board:
Getting started with Inspekt for CPG</a> (access restricted to <a href="credits.htm#developers">dev team members</a>)</li>
</ul>

<div id="doc_footer">
	<div class="doc_info_wrapper">
		<span id="doc_last_changed">$LastChangedDate$</span>
	</div>
</div>
</body>
</html>