<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<title>Packaging a new release - Coppermine Photo Gallery - Documentation &amp; Manual</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="language" content="en" />
<meta name="copyright" content="Coppermine dev team" />
<meta name="description" content="" />
<!--
  Coppermine version: 1.6.03
  $HeadURL$
-->
<link rel="stylesheet" type="text/css" href="../style/style.css" media="all" />
<link rel="stylesheet" type="text/css" href="../style/screen.css" media="screen" />
<link rel="stylesheet" type="text/css" href="../style/print.css" media="print" />
<link rel="shortcut icon" href="../favicon.ico" />
<script src="../js/jquery.js" type="text/javascript"></script>
<script src="../js/jquery.treeview.js" type="text/javascript"></script>
<script src="script.js" type="text/javascript"></script>
</head>
<body>
<h1 id="docheader">Coppermine Photo Gallery v1.6.x: Documentation and Manual</h1>
<div id="toc">
<a href="toc.htm">Table of Contents</a>
</div>

<a id="packaging"></a><h1>Packaging a new release<a href="#packaging" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h1>
<p>This section of the documentation is meant to explain the <a href="#packaging_steps">steps</a> needed to perform by the maintainer of the Coppermine package each time a new package release is being made.</p>
<p>This page does <strong>not</strong> deal with the steps that end users need to make when a new package comes out.</p>

<div class="indent">
    <a id="packaging_target_audience"></a><h2>Target audience<a href="#packaging_target_audience" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h2>
    <p>This part of the documentation is not meant for end users of Coppermine, but <strong>only</strong> for developers. There is absolutely no support for this section, it comes as-is. If you're not a member of the Coppermine dev team, then the contents of this page are not meant for you.</p>
    <a id="packaging_target_audience_end"></a>

    <a id="packaging_git"></a><h2>Git repository<a href="#packaging_git" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h2>
    <p>In the first place you need to perform core actions on the <a href="dev_git.htm#git">Git</a> repository level of Coppermine. For this purpose, you need to have write access to the Git repository, which is something you can not make up. A dev team member with project admin status needs to have granted you write access to the Git repository that is hosted at github.com. You need to have some experience in using your Git client before trying to accomplish the actions described here.</p>

    <a id="packaging_steps"></a><h2>Steps<a href="#packaging_steps" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h2>
    These steps need to be taken to package a new release.
    <ul>
        <li>
            <a id="packaging_steps_git_pull"></a><h3>Pull<a href="#packaging_steps_git_pull" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            As with all Git operations, you need to perform a pull to make sure that your working copy of the Git repository is up-to-date.
        </li>
        <li>
            <a id="packaging_steps_version_number"></a><h3>Edit the version number<a href="#packaging_steps_version_number" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            To edit the version number of the Coppermine release, you will need to edit several files:
            <ul>
                <li>The actual version number is being stored in the file <span class="code">include/init.inc.php</span>, so you will need to edit that file with a plain text editor and find <input type="text" readonly="readonly" value="define('COPPERMINE_VERSION', '1.6.X');" size="38" maxlength="38" class="code smaller" />, where X corresponds to the current minor version count that needs to be counted up.</li>
                <li>The version number output of all pages of the documentation is being replaced using the JavaScript file behind each localization folder; that's why you need to loop through all language folders within the <span class="code">docs</span>-folder, edit <span class="code">script.js</span>, find the definition for the function <span class="code">cpgDocHeader</span> and inside that definition change the localization line that corresponds to <input type="text" readonly="readonly" value="$('#docheader').text('Coppermine Photo Gallery v1.6.X: Documentation and Manual');" size="82" maxlength="82" class="code smaller" />, where X stands for the minor version number.</li>
            </ul>
        </li>
        <li>
            <a id="packaging_steps_loop_through_files"></a><h3>Replace version number in all files<a href="#packaging_steps_loop_through_files" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            You need to loop through all text files (file extensions <span class="code">.php</span>, <span class="code">.css</span>, <span class="code">.js</span>, <span class="code">.txt</span>, <span class="code">.sql</span>, <span class="code">.htm</span>) and replace the version number in the header with the version number of the new release.<br />
            <div class="cpg_example">You will have to find <input type="text" readonly="readonly" value="Coppermine version: 1.6.X" size="25" maxlength="25" class="code smaller" /> and replace with <input type="text" readonly="readonly" value="Coppermine version: 1.6.Y" size="25" maxlength="25" class="code smaller" /></div>
            To accomplish this, you will need a tool that can batch-replace in files:
            <ul>
                <li>
                    <a id="packaging_steps_loop_through_files_linux"></a><h4>Linux<a href="#packaging_steps_loop_through_files_linux" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h4>
                    On most posix-compliant operating systems (like Unix, Linux, BSD etc.) you should have all needed tools at hand already. Basically you loop through all files with a given extension, search for the string inside it and replace it. The command that can be run in a console could look like this:
                    <textarea class="code smaller" style="width:100%" rows="1">find /path/on/filesystem/level/to/your/working/copy/ -maxdepth 4 -name "*.php" -o -name "*.css" -o -name "*.js" -o -name "*.txt" -o -name "*.sql" -o -name "*.htm" | xargs sed -i 's/Coppermine version: 1.6.X/Coppermine version: 1.6.Y/g'</textarea>
                    If you want to turn this into a shell script, don't forget the shebang at the start of the file (usually something like <span class="code">#!/bin/sh</span>).
                </li>
                <li>
                    <a id="packaging_steps_loop_through_files_windows"></a><h4>Windows<a href="#packaging_steps_loop_through_files_windows" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h4>
                    On Windows-driven computers you will need an editor that is capable to replace in multiple files or a tool that is dedicated to the replacement of text in files like the freeware apps <a href="http://www.emurasoft.com/replall/" rel="external" class="external">Replace in files</a> by Emurasoft or the app <a href="http://www.markus-bader.de/MB-SearchAndReplace/index.php" rel="external" class="external">MB-Search&amp;Replace</a> by Markus Bader. Both apps are available in English as well as in German and both don't require an installation (the executable runs out of the box, even from a USB stick or similar).
                </li>
            </ul>
            After having looped through all files, check in your Git client if you actually have changed all non-binary files inside the package - all files should be marked as "changed" in your Git client. Those that are not marked as changed require manual editing - maybe the version number had been forgotten to be changed in the previous release or when the file was <a href="dev_files.htm">added to the Git repository</a> in the first place.<br />
            Don't push your changes yet though; there are some more edits that need to be performed.
        </li>
        <li>
            <a id="packaging_steps_bom"></a><h3>Remove Byte Order Marks<a href="#packaging_steps_bom" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            As Coppermine is a community effort and there are many developers who have write access to the Git repository it might happen that a Byte Order Mark (BOM) has crept into non-binary files. This happens without the developer being aware of it and shouldn't cause a lot of fuzz among the dev team, yet it can cause serious issues after the release, with the byte order mark shining through on some or all pages and especially with authentification issues, as the pre-mature start of the output (even if it's just the accidental output of the BOM) will interact with the browser's ability to receive the header and subsequently the cookie.<br />
            That's the reason why it's a good idea to scan the non-binary files (file extensions <span class="code">.php</span>, <span class="code">.css</span>, <span class="code">.js</span>, <span class="code">.txt</span>, <span class="code">.sql</span>, <span class="code">.htm</span>) once more for the existance of a BOM and get rid of it if present. On Windows-driven computers, the BOM usually manifests with "funny" charcters - usually <span class="code">&iuml;&raquo;&iquest;</span>, so you should loop through all text-only files for that string and get rid of that string by replacing it with "" (nothing), using exactly the same tool used for the version number replacement above.
        </li>
        <li>
            <a id="packaging_steps_write_announcement_thread"></a><h3>Prepare an announcement thread<a href="#packaging_steps_write_announcement_thread" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            Prepare an announcement thread in advance (before you actually release) inside the dev-only sub-board of the Coppermine forum. This thread can be empty - you can fill it later, or have another dev team member fill it. You need to create it in advance in order to be able to refer to the thread from within the documentation that will ship with the release.
        </li>
        <li>
            <a id="packaging_steps_docs_upgrade"></a><h3>Edit the upgrade section of the docs<a href="#packaging_steps_docs_upgrade" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            Edit the <a href="upgrading.htm">upgrade section of the docs</a> and (if you can) the other corresponding sections of the localizations of the docs. Find the table inside the section &quot;<a href="upgrading.htm?expand_all=1#upgrade_why_reasons">Reasons for package releases</a>&quot; there and add a table row at the top with the needed information. Take a look at the other table rows that correspond to previous release to get an idea what should go into that section. Refer to the changelog file in the root folder to figure out about the changes that went into the release that you're about to package. Don't forget to refer to the announcement thread that you have created in the previous step to make sure you can inform users about last minute changes accordingly.
        </li>
        <li>
            <a id="packaging_steps_changelog"></a><h3>Edit the changelog<a href="#packaging_steps_changelog" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            Add at least one line to the changelog that explains the version number change that you're about to push. Add a line as well that mentions the release date.
        </li>
        <li>
            <a id="packaging_steps_versioncheck"></a><h3>Update the versioncheck data<a href="#packaging_steps_versioncheck" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            Edit the file <span class="code">include/cpg16x.files.xml</span> inside your working copy of the Git repository with a plain text editor. Make sure that the  XML file is complete. Loop through the changelog to check if all files (language files etc.) that have been <a href="dev_files.htm">added to the Git repository</a> since the previous release have been added to <span class="code">include/cpg16x.files.xml</span> file as well. If all developers have done as suggested, there should be nothing left to do for you in this aspect. Save your changes (if any).
        </li>
        <li>
            <a id="packaging_steps_git_push"></a><h3>Push your changes<a href="#packaging_steps_git_push" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            Of course you need to push all your changes to the Git repository, using your Git client.
        </li>
        <li>
            <a id="packaging_steps_git_merge"></a><h3>Merge branches<a href="#packaging_steps_git_merge" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            TODO: Add section how to update "master" with latest content of "develop"
        </li>
        <li>
            <a id="packaging_steps_create_release"></a><h3>Create a release at GitHub.com<a href="#packaging_steps_create_release" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            Create a new release on GitHub.com.<br />
            TODO: add simple explanation
        </li>
        <li>
            <a id="packaging_steps_git_clone"></a><h3>Clone master to fresh local directory<a href="#packaging_steps_git_clone" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            By now it's time to create the actual package, so you may be tempted to just zip your local working copy of the Git repository, but that would be a very bad idea, as both your individual config file as well as all your changes (e.g. test uploads etc.) would be residing in that copy. Additionally, a lot of garbage would reside in that copy, as Git creates a lot of hidden files inside your local working copy.<br />
            That's why you need to clone the "master" branch into a new, empty folder on your client and use that from now on. This will make sure that only the files that are meant to go into the package will actually go into your package.
        </li>
        <li>
            <a id="packaging_steps_create_zip"></a><h3>Create the archive<a href="#packaging_steps_create_zip" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            Create an archive according to the <a href="dev_plugins.htm#plugin_writing_naming_conventions">naming conventions</a>, using your favorite archiver (on Windows, 7-Zip is recommended). The naming convention for package releases is pretty straightforward: it's just the abbreviation <span class="code">cpg</span> followed by the exact version number. Subsequently, your archive should be named <span class="code">cpg1.6.X.zip</span>, where X represents the minor version number that you're about to package. Its'mandatory to come up with a  <span class="code">zip</span> archive, but you can come up with additional archives as well (e.g. <span class="code">.7z</span>, <span class="code">.tar.gz</span> or <span class="code">.tar.bz2</span>) to make things easier for users on alternative operating systems.
        </li>
        <li>
            <a id="packaging_steps_upload_zip"></a><h3>Upload the archive<a href="#packaging_steps_upload_zip" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            The archive(s) created in the previous step are meant to go into the download repository at <a href="https://sourceforge.net/projects/coppermine/files/" rel="external" class="external">https://sourceforge.net/projects/coppermine/files/</a>. You will need packager privileges on the Coppermine project pages that reside on the sourceforge.net webspace.
            <ul>
                <li><a href="https://sourceforge.net/account/login.php" rel="external" class="external">Log in</a> into your account on sf.net</li>
                <li>Go to the <a href="https://sourceforge.net/projects/coppermine/files/" rel="external" class="external">File Manager</a></li>
                <li>Expand the folder labelled "Coppermine"</li>
                <li>Expand the folder labelled "1.6.x"</li>
                <li>Click the "Add File" button</li>
                <li>Browse to your package on your client and select it for upload</li>
                <li>After uploading has finished click on the "i" icon in the uploaded package's row and set it as default download for all operating systems</li>
            </ul>
        </li>
        <li>
            <a id="packaging_steps_move_announcement"></a><h3>Publish announcement thread<a href="#packaging_steps_move_announcement" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            Move the announcement thread from the dev-only board to the announcement board. You will need moderator capabilities on forum level.
        </li>
        <li>
            <a id="packaging_steps_xml_webspace"></a><h3>Update cpg16x.files.xml on the Coppermine home page<a href="#packaging_steps_xml_webspace" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            The xml file that contains the information about the most recent stable release needs to be uploaded to the official web space, replacing the file http://coppermine-gallery.net/cpg16x.files.xml that clients will connect to when checking for upgrades with the one from the Git repository (e.g. the file that corresponds to https://raw.githubusercontent.com/coppermine-gallery/cpg1.6.x/develop/include/cpg16x.files.xml). If you don't have access to the project's official webspace by FTP, ask a fellow developer to perform this task for you.
        </li>
        <li>
            <a id="packaging_steps_download_button"></a><h3>Update the download button on the Coppermine home page<a href="#packaging_steps_download_button" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            On our <a href="http://coppermine-gallery.net/" rel="external" class="external">Coppermine home page</a> you need to update the URL and title of the download link as well as updating the <a href="http://coppermine-gallery.net/images/download_cpg16x.png" rel="external" class="external">button image</a> itself.
        </li>
        <li>
            <a id="packaging_steps_news"></a><h3>Create news items<a href="#packaging_steps_news" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            There are various news items that need to be created. They can all be filled with similar or even identical content, as they catter for different media or different ways to access the news.
            <ul>
                <li>
                    <a id="packaging_steps_news_sf"></a><h4>News item on sf.net<a href="#packaging_steps_news_sf" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h4>
                    Create a news article on sf.net that contains a link to the announcement thread. To accomplish this, select, "<a href="https://sourceforge.net/p/coppermine/news/" rel="external" class="external">News</a>" from the "Develop" menu while being logged in with your sourceforge.net account. On the news page, use the "Submit" link to create a news item. The news item should contain a link to the announcement thread on the forum.
                </li>
                <li>
                    <a id="packaging_steps_news_forum"></a><h4>News item on forum<a href="#packaging_steps_news_forum" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h4>
                    Create a news item on the forum that contains a link to the announcement thread. You will need the corresponding priviledge on the forum.
                </li>
                <li>
                    <a id="packaging_steps_news_homepage"></a><h4>News item on home page<a href="#packaging_steps_news_homepage" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h4>
                    On the <a href="http://coppermine-gallery.net/" rel="external" class="external">Coppermine home page</a>, create a news item that contains a link to the announcement thread. Move outdated news items to the <a href="http://coppermine-gallery.net/archive.php" rel="external" class="external">news archive</a>.
                </li>
                <li>
                    <a id="packaging_steps_news_embedded"></a><h4>News embedded into existing galleries<a href="#packaging_steps_news_embedded" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h4>
                    To make users of existing galleries aware of the new release, edit <a href="http://coppermine-gallery.net/cpg16x_news.htm" rel="external" class="external">http://coppermine-gallery.net/cpg16x_news.htm</a>. This file is the source for the news item that is displayed for Coppermine admins on their galleries if the option <a href="configuration.htm#admin_general_coppermine_news">Display news from Coppermine-gallery.net</a> is enabled.
                </li>
            </ul>
        </li>
        <li>
            <a id="packaging_steps_demo"></a><h3>Update the demo<a href="#packaging_steps_demo" title="Link to this section"><img src="images/anchor.gif" width="15" height="9" alt="" /></a></h3>
            Use your favorite FTP app to update the demo on the Coppermine home page. You will of course need FTP access to the corresponding web space.<br />
            Make sure not to overwrite the custom anycontent.<br />
            Keep in mind that you need to apply changes to the JavaScript file <span class="code">script.js</span> inside the localizations of the docs folder - they compose the site navigation.
        </li>
    </ul>
</div>
<a id="packaging_end"></a>

<div id="doc_footer">
	<div class="doc_info_wrapper">
		<span id="doc_last_changed">$LastChangedDate$</span>
	</div>
</div>
</body>
</html>